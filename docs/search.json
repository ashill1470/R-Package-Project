[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 RPackProj authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/df_apply.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"df_apply()","text":"df_apply() function takes data frame applies given function specified columns returns modified version original data frame function applied.","code":""},{"path":"/articles/df_apply.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"df_apply()","text":"","code":"df_apply(   .data = ...,    .fun = ...,    .filter = ...,   ... )"},{"path":[]},{"path":"/articles/df_apply.html","id":"data","dir":"Articles","previous_headings":"Arguments","what":".data","title":"df_apply()","text":"data frame want function applied ","code":""},{"path":"/articles/df_apply.html","id":"fun","dir":"Articles","previous_headings":"Arguments","what":".fun","title":"df_apply()","text":"function want applied given columns","code":""},{"path":"/articles/df_apply.html","id":"filter","dir":"Articles","previous_headings":"Arguments","what":".filter","title":"df_apply()","text":"function can applied column data frame. filters columns want function applied .","code":""},{"path":"/articles/df_apply.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"df_apply()","text":"","code":"df1 <- data.frame(   A = c(1, 2, 3),   B = c(4, 5, 6),   C = c(\"foo\", \"bar\", \"baz\") )  new_df1 <- df_apply(.data = df1, .fun = function(x) x * 2, .filter = is.numeric)  new_df1 #>   A  B   C #> 1 2  8 foo #> 2 4 10 bar #> 3 6 12 baz df2 <- data.frame(   A = c(1.875, 2.654, 3.676),   B = c(4.169, 5.456, 6.289),   C = c(7.846, 8.186, 9.945) )  new_df2 <- df_apply(.data = df2, .fun = round, .filter = is.numeric)  new_df2 #>   A B  C #> 1 2 4  8 #> 2 3 5  8 #> 3 4 6 10 glimpse(population) #> Rows: 19 #> Columns: 17 #> $ age_group                                        <chr> \"0\", \"01-04\", \"05-09\"… #> $ X1940.U.S..Std.Million                           <int> 15343, 64718, 81147, … #> $ X1950.U.S..Std.Million                           <int> 20882, 86376, 87591, … #> $ X1960.U.S..Std.Million                           <int> 22930, 90390, 104235,… #> $ X1970.U.S..Std.Million                           <int> 17151, 67265, 98204, … #> $ X1980.U.S..Std.Million                           <int> 15598, 56565, 73716, … #> $ X1990.U.S..Std.Million                           <int> 12936, 60863, 72772, … #> $ X1991.Canadian.Std.Million                       <int> 14334, 55131, 69454, … #> $ X1996.Canadian.Std.Million                       <int> 12342, 53893, 67985, … #> $ X2000.U.S..Std.Million                           <int> 13818, 55317, 72533, … #> $ X2000.U.S..Std.Population..Census.P25.1130.      <int> 3794901, 15191619, 19… #> $ X2011.Canadian.Standard.Population               <int> 376321, 1522743, 1810… #> $ European..EU.27.plus.EFTA.2011.2030..Std.Million <int> 10000, 40000, 55000, … #> $ European..Scandinavian.1960..Std.Million         <int> 16000, 64000, 70000, … #> $ World..Segi.1960..Std.Million                    <int> 24000, 96000, 100000,… #> $ World..WHO.2000.2025..Std.Million                <int> 17917, 70652, 86870, … #> $ Standard.population.OECD                         <int> 1624, 6322, 8089, 830…  # Lets convert the population from millions into thousands to_thousands <- function(x) {   x * 1000 }  new_pop <- df_apply(.data = population, .fun = to_thousands, .filter = is.integer)  glimpse(new_pop) #> Rows: 19 #> Columns: 17 #> $ age_group                                        <chr> \"0\", \"01-04\", \"05-09\"… #> $ X1940.U.S..Std.Million                           <dbl> 15343000, 64718000, 8… #> $ X1950.U.S..Std.Million                           <dbl> 20882000, 86376000, 8… #> $ X1960.U.S..Std.Million                           <dbl> 22930000, 90390000, 1… #> $ X1970.U.S..Std.Million                           <dbl> 17151000, 67265000, 9… #> $ X1980.U.S..Std.Million                           <dbl> 15598000, 56565000, 7… #> $ X1990.U.S..Std.Million                           <dbl> 12936000, 60863000, 7… #> $ X1991.Canadian.Std.Million                       <dbl> 14334000, 55131000, 6… #> $ X1996.Canadian.Std.Million                       <dbl> 12342000, 53893000, 6… #> $ X2000.U.S..Std.Million                           <dbl> 13818000, 55317000, 7… #> $ X2000.U.S..Std.Population..Census.P25.1130.      <dbl> 3794901000, 151916190… #> $ X2011.Canadian.Standard.Population               <dbl> 376321000, 1522743000… #> $ European..EU.27.plus.EFTA.2011.2030..Std.Million <dbl> 1.0e+07, 4.0e+07, 5.5… #> $ European..Scandinavian.1960..Std.Million         <dbl> 1.6e+07, 6.4e+07, 7.0… #> $ World..Segi.1960..Std.Million                    <dbl> 2.4e+07, 9.6e+07, 1.0… #> $ World..WHO.2000.2025..Std.Million                <dbl> 17917000, 70652000, 8… #> $ Standard.population.OECD                         <dbl> 1624000, 6322000, 808… df3 <- data.frame(    D = c(5, 5, 8, 3),    E = c(4, 7, 4, 2),    F = c(8, 10, 3, 4)) my_fun <- function(x, multiplier) x * multiplier my_filter <- is.numeric df_apply(.data = df3, .fun = my_fun, .filter = my_filter, multiplier = 2) #>    D  E  F #> 1 10  8 16 #> 2 10 14 20 #> 3 16  8  6 #> 4  6  4  8"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Yuqian Wang. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wang Y (2023). RPackProj: df_apply(). R package version 0.0.0.9000.","code":"@Manual{,   title = {RPackProj: df_apply()},   author = {Yuqian Wang},   year = {2023},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"rpackproj","dir":"","previous_headings":"","what":"df_apply()","title":"df_apply()","text":"goal RPackProj use df_apply function deal changing values certain columns data frame. Authors: Andrew Hill, Richmond Yevudza, Yuquian Wang","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"df_apply()","text":"can install development version RPackProj GitHub : https://github.com/ashill1470/RPackProj","code":"# install.packages(\"devtools\") devtools::install_github(\"ashill1470/RPackProj\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"df_apply()","text":"basic example shows solve common problem:","code":"library(RPackProj)  df <- data.frame(   A = c(1, 2, 3),   B = c(4, 5, 6),   C = c(\"foo\", \"bar\", \"baz\") )  new_df <- df_apply(df, function(x) x * 2, is.numeric)  new_df #>   A  B   C #> 1 2  8 foo #> 2 4 10 bar #> 3 6 12 baz"},{"path":"/reference/df_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function to specific columns of a data frame — df_apply","title":"Apply a function to specific columns of a data frame — df_apply","text":"Apply function specific columns data frame","code":""},{"path":"/reference/df_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function to specific columns of a data frame — df_apply","text":"","code":"df_apply(.data, .fun, .filter, ...)"},{"path":"/reference/df_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function to specific columns of a data frame — df_apply","text":".data data frame. .fun function takes vector returns vector. .filter function takes vector returns logical vector. ... Additional arguments pass .fun .filter.","code":""},{"path":"/reference/df_apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function to specific columns of a data frame — df_apply","text":"data frame modified version .data","code":""},{"path":"/reference/df_apply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function to specific columns of a data frame — df_apply","text":"","code":"df <- data.frame(   A = c(1, 2, 3),   B = c(4, 5, 6),   C = c(\"foo\", \"bar\", \"baz\")) my_fun <- function(x) x * 2 my_filter <- function(x) is.numeric(x) df_apply(df, my_fun, my_filter) #>   A  B   C #> 1 2  8 foo #> 2 4 10 bar #> 3 6 12 baz"}]

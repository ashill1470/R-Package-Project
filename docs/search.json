[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 RPackProj authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/Andrew-Baseball.html","id":"plotly-basics","dir":"Articles","previous_headings":"","what":"Plotly Basics","title":"Andrew-Baseball","text":"Plotly R package creates high quality, interactive plots graphs. get started, just call plotting function plot_ly(). basic plot can make plotly scatterplot: including marker(), can customization, like changing point color. Use pipe operator can include proper labeling. wanted ‘connect dots’? Just add mode = 'lines' want scatterplots multiple teams?","code":"tigers <- baseball |>   filter(teamID %in% c('DET')) plot_ly(data=tigers, x=~yearID, y=~W, type = 'scatter') plot_ly(data=tigers, x=~yearID, y=~W, type = 'scatter',          marker = list(size = 7.5,                color = 'orange')         ) plot_ly(data=tigers, x=~yearID, y=~W, type='scatter',          marker = list(size = 7.5,                color = 'orange')         ) |>   layout(     title = 'Detroit Wins since 1901',     xaxis = list(title = 'Year'),     yaxis = list(title = 'Wins')   ) plot_ly(data=tigers, x=~yearID, y=~W, type='scatter', mode = 'lines') |>   layout(     title = 'Detroit Wins since 1901',     xaxis = list(title = 'Year'),     yaxis = list(title = 'Wins')   ) tigersCubsPhils <- baseball |>   filter(yearID >= 1901) |>   filter(franchID %in% c('DET', 'CHC', 'PHI'))  plot_ly(data=tigersCubsPhils, x=~yearID, y=~W,         type = 'scatter', color=~teamID) #> No scatter mode specifed: #>   Setting the mode to markers #>   Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode"},{"path":"/articles/Andrew-Baseball.html","id":"animations","dir":"Articles","previous_headings":"Plotly Basics","what":"Animations","title":"Andrew-Baseball","text":"One thing makes plotly special addition animations interactivity. example , ’ll look Detroit Tigers Winning Percentage years. Now can see Detroit Tigers winning percentage changed year year since 1901. can see ’ve good years (like 1934 1984), also really poor years (like 1952 2003).","code":"# Plotly's accumulate function. Have to run separately because it is not  #   built into the plotly package accumulate_by <- function(dat, var) {   var <- lazyeval::f_eval(var, dat)   lvls <- plotly:::getLevels(var)   dats <- lapply(seq_along(lvls), function(x) {     cbind(dat[var %in% lvls[seq(1, x)], ], frame = lvls[[x]])   })   dplyr::bind_rows(dats) }  # Create the figure and add the accumulate_by() function base <- tigers base <- base %>% accumulate_by(~yearID)  # Start creating the figure base <- base %>%   plot_ly(     x = ~yearID,      y = ~winPercentage,     split = ~teamID,     frame = ~frame,      type = 'scatter',     mode = 'lines',      line = list(simplyfy = F)   )  # Labels the x-axis base <- base %>% layout(   xaxis = list(     title = \"Year\",     zeroline = F   ),   # Labels the y-axis   yaxis = list(     title = \"Winning Percentage\",     zeroline = F   ) )   # Sets animation settings base <- base %>% animation_opts(   frame = 500,    transition = 0,    redraw = FALSE )  # Hide or Display the animation slider base <- base %>% animation_slider(   hide = F )  # Set where the Play button will be on the plot base <- base %>% animation_button(   # Tell plotly where to place the button   x = 1, xanchor = \"right\", y = 0, yanchor = \"bottom\" )  # Display the plot base"},{"path":"/articles/Andrew-Baseball.html","id":"d-plots","dir":"Articles","previous_headings":"Plotly Basics","what":"3-D Plots","title":"Andrew-Baseball","text":"Another cool feature plotly ability create interactive 3-d plots. plot isn’t super helpful analysis extra-base hits time, reveal trends triples decreased time home runs increased.","code":"threeDBase <- plot_ly(tigers, x = ~double, y = ~triple, z = ~HR,                 marker=list(size = 3, color =~yearID, showscale=TRUE)) |>   add_markers()  threeDBase"},{"path":"/articles/Andrew-Baseball.html","id":"conclusions","dir":"Articles","previous_headings":"Plotly Basics","what":"Conclusions","title":"Andrew-Baseball","text":"Plotly great want interactive graph easy create easy interpret, also applicable wide range use cases. can create sophisticated data visualizations relatively easily.","code":""},{"path":"/articles/Electoral_votes_vs_Popular_votes.html","id":"data-wrangling-from-data-202-class-with-tristan-contant","dir":"Articles","previous_headings":"","what":"Data Wrangling from Data 202 Class with Tristan Contant","title":"Eason-vignette","text":"Since graph based vignette, talk much . cool web scraping data wrangling skill!","code":"# list of years for which we will collect election data election_years <- seq(from = 1828, to = 2020, by = 4)  # an empty dataframe that we will add information to election_data <- data.frame()  # for each election year, go to the website, find data, and add it to the working dataframe for (year in election_years) {   # different URL for each election year   url_str <- paste(\"https://www.presidency.ucsb.edu/statistics/elections/\", as.character(year), sep = \"\")   url <- getURL(url_str, .opts = list(ssl.verifypeer = FALSE))      # read in table   tables <- readHTMLTable(url)   tables <- list.clean(tables, fun = is.null, recursive = FALSE)   df <- tables[[1]]      # find data in table depending on year   if (year < 2016) {     df <- df[c(3,4,5,6), ]     df <- df %>% subset(select = c(V4, V6, V8))      df <- df %>% rename(candidate = V4,                         n_elect = V6,                         n_pop = V8)     df <- df %>% mutate(year = year) %>%       filter(!is.na(n_elect))   } else {     df <- df[c(4,5), ]     df <- df %>% subset(select = c(V3, V5, V7))      df <- df %>% rename(candidate = V3,                         n_elect = V5,                         n_pop = V7)     df <- df %>% mutate(year = year)   }      # add information to working dataframe   election_data <- election_data %>% bind_rows(df) }  glimpse(election_data) #> Rows: 118 #> Columns: 4 #> $ candidate <chr> \"Andrew Jackson\", \"John Quincy Adams\", \"Andrew Jackson\", \"He… #> $ n_elect   <chr> \"178\", \"83\", \"219\", \"49\", \"11\", \"7\", \"170\", \"73\", \"26\", \"14\"… #> $ n_pop     <chr> \"642,553\", \"500,897\", \"701,780\", \"484,205\", \"0\", \"100,715\", … #> $ year      <dbl> 1828, 1828, 1832, 1832, 1832, 1832, 1836, 1836, 1836, 1836, … # make n_elect and n_pop integer types election_data <- election_data %>% mutate(n_elect = as.integer(n_elect),                         n_pop = as.integer(gsub(\",\", \"\", n_pop)))  # calculate perc_elect and perc_pop election_data <- election_data %>% left_join(election_data %>% group_by(year) %>% summarise(total_n_elect = sum(n_elect)), by = \"year\") %>%   left_join(election_data %>% group_by(year) %>% summarise(total_n_pop = sum(n_pop)), by = \"year\") %>%    mutate(perc_elect  = n_elect / total_n_elect * 100,          perc_pop = n_pop / total_n_pop * 100)  # determine the winner for each year election_data <- election_data %>% left_join(election_data %>% group_by(year) %>% summarise(win_perc_elect = max(perc_elect)), by = \"year\") election_data <- election_data %>% mutate(is_winner = (win_perc_elect == perc_elect))  # remove extraneouse variables election_data <- election_data %>% subset(select = -c(win_perc_elect))  glimpse(election_data) #> Rows: 118 #> Columns: 9 #> $ candidate     <chr> \"Andrew Jackson\", \"John Quincy Adams\", \"Andrew Jackson\",… #> $ n_elect       <int> 178, 83, 219, 49, 11, 7, 170, 73, 26, 14, 234, 60, 170, … #> $ n_pop         <int> 642553, 500897, 701780, 484205, 0, 100715, 764176, 55081… #> $ year          <dbl> 1828, 1828, 1832, 1832, 1832, 1832, 1836, 1836, 1836, 18… #> $ total_n_elect <int> 261, 261, 286, 286, 286, 286, 283, 283, 283, 283, 294, 2… #> $ total_n_pop   <int> 1143450, 1143450, 1286700, 1286700, 1286700, 1286700, 15… #> $ perc_elect    <dbl> 68.199234, 31.800766, 76.573427, 17.132867, 3.846154, 2.… #> $ perc_pop      <dbl> 56.194237, 43.805763, 54.541074, 37.631538, 0.000000, 7.… #> $ is_winner     <lgl> TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, FAL… election_data <- election_data %>%    mutate( new_perc_elect =              case_when(                 perc_elect == 100 ~ 81.25,                 TRUE ~ perc_elect)) %>%    mutate(new_perc_elect = as.numeric(new_perc_elect)) election_data2 <- election_data %>%    # tidy data for ease of coding visual aesthetic of `type`   pivot_longer(cols = c(new_perc_elect, perc_pop), names_to = \"type\", values_to = \"perc\") %>%    # filter for president-elects   filter(is_winner)"},{"path":"/articles/Electoral_votes_vs_Popular_votes.html","id":"create-a-simple-scatter-plot","dir":"Articles","previous_headings":"","what":"Create a Simple Scatter Plot","title":"Eason-vignette","text":"ploty version interactive scatter plot president name, year, percentage popular vote electoral vote. buttons added, now can click buttons focus electoral popular vote.","code":"fig1 <- plot_ly(data = election_data2,                  x = ~year, y = ~perc, type = 'scatter', mode = 'markers',                 color =~ type, colors = c(\"#8C6E23\", \"#C79A26\"),                 text = ~paste('Year:', year, \"$<br>Candidate: \", candidate))  fig1 updatemenus <- list(   list(     active = -1,     type = 'buttons',     buttons = list(       list(         label = \"Popular Votes\",         method = \"update\",         args = list(list(visible = c(FALSE, TRUE)),                     list(title = \"Popular Votes Precentage from 1828\"))),       list(         label = \"Electoral Votes\",         method = \"update\",         args = list(list(visible = c(TRUE, FALSE)),                     list(title = \"Electoral Votes Precentage from 1828\"))),       list(         label = \"Both Votes\",         method = \"update\",         args = list(list(visible = c(TRUE, TRUE)),                     list(title = \"The Electoral College can magnify a win into a landslide\")))     )   ) ) election_data2 <- election_data2 %>%                   rename(Electoral_Vote = perc_elect ) %>%                   mutate(percentage = paste0(round(perc, 2),\"%\", sep=\"\", recycle0 = FALSE)) %>%                    mutate(vote_type = case_when(type == \"perc_pop\" ~ \"Popular vote\",                                                type == \"new_perc_elect\" ~ \"Electoral vote\")) election_data2 <- election_data2 %>% mutate(vote_type = case_when(type == \"perc_pop\" ~ \"Popular vote\",                                                type == \"new_perc_elect\" ~ \"Electoral vote\")) fig1 <- plot_ly(data = election_data2 ,                  x = ~year, y = ~perc, type = 'scatter', mode = 'markers',                 color =~ vote_type, colors = c(\"#232323\", \"#3abcbd\"),                 text = ~paste(\"President:\",candidate, \"$<br>Percent: \", percentage,\"$<br>Year: \", year  )) %>%         layout(showlegend = FALSE, updatemenus = updatemenus)  fig1"},{"path":"/articles/Electoral_votes_vs_Popular_votes.html","id":"exploring-data-bar-chart","dir":"Articles","previous_headings":"","what":"Exploring Data: Bar Chart","title":"Eason-vignette","text":"fact electoral vote percentage always higher popular vote percentage allow us use bar chart . bar chart, can see started 2008, difference getting smaller, trend continue 2024?","code":"election_data <-    election_data %>%   # filter by election winners   filter(is_winner) %>%   # compute difference in electoral and popular vote   mutate(diff = new_perc_elect - perc_pop) bar_fig <- plot_ly(   election_data %>%   # filter by election winners   filter(is_winner) %>%   # compute difference in electoral and popular vote   mutate(diff = new_perc_elect - perc_pop) ,   x = ~year,   y = ~diff,   name = \"SF Zoo\",   type = \"bar\" ) %>%   layout(title = 'Difference in percent of electoral and opular votes',            yaxis = list(title = '%electoral-%popular'))  bar_fig"},{"path":"/articles/Electoral_votes_vs_Popular_votes.html","id":"exploring-data-line-chart","dir":"Articles","previous_headings":"","what":"Exploring Data: Line Chart","title":"Eason-vignette","text":"scatter shows percent electoral popular votes winning candidate received time. However, image show us total number electoral popular votes changes time. Furthermore, graphic now show raw number voters electors winning candidates received. explore relationships following alternative graph. first thing noticeable graph total number electors stagnated total number voters continues increase. number electors determined adding number people house number senators. Since 1913, number people house set 435 (Public Law 62-5). number senators set two state District Columbia. Therefore, given changes laws, number electors increase formation new states. example, Puerto Rico became state number electors increase 540. foresee inclusion many states future outside Puerto Rico, expect number electors remain stable future. interesting see variability number electors 1800s. formation new states, see massive increase number electors. Another point interest sudden dip electors 1864. drop due invalidation confederate state electoral votes civil war. Popular votes, hand, reflect continuous trend increased raw voter participation. Prior 1900’s, looks like increase linear, afterwards, number voter growth exponential faster. 2020 presidential election people voting ever , record raw voter participation. However, increase may result increased population, greater desire vote. research need conducted better assess inquiries. also can see number popular electoral votes winning candidate received. number popular votes winning candidate recieved continued increase. hand, number electoral votes candidate received visually significant trend, although one may argue candidates recently won many electoral votes candidates 1900s. (Joint writing Tristan Contant Yuqian Wang)","code":"line_scatter_pop <- plot_ly(election_data %>%    filter(is_winner),    x = ~year, y = ~n_pop, name = \"Winner's popular votes\", type = 'scatter', mode = 'markers') %>%   layout(title = 'Total voters over time',            yaxis = list(title = 'voters'))    line_scatter_pop <- line_scatter_pop %>% add_trace(y = ~total_n_pop, name = 'Total voters', mode = 'lines+markers') line_scatter_pop line_scatter_ele <- plot_ly(election_data %>%    filter(is_winner),    x = ~year, y = ~n_elect, name = \"Winner's electors\", type = 'scatter', mode = 'markers') %>%   layout(title = 'Total electors over time',            yaxis = list(title = 'electors'))    line_scatter_ele <- line_scatter_ele %>% add_trace(y = ~total_n_elect, name = \"Total electors\", mode = 'lines+markers') line_scatter_ele"},{"path":[]},{"path":"/articles/Electoral_votes_vs_Popular_votes.html","id":"original-good-version","dir":"Articles","previous_headings":"Post-credits scene","what":"Original good version","title":"Eason-vignette","text":"author actually still likes ggplot, however, can convert ggplot graph ploty item ggplotly(). ## ggplot way make plotly Clearly, can see features shown converting, neat clean ggplot setting. beginning assignment, trying reproduce whole plot ploty setting, however, easy.","code":"election_data %>%    # tidy data for ease of coding visual aesthetic of `type`   pivot_longer(cols = c(new_perc_elect, perc_pop), names_to = \"type\", values_to = \"perc\") %>%    # filter for president-elects   filter(is_winner) %>%   # create plot   ggplot(aes(x = year, y = perc)) +   # adding vertical lines   geom_line(aes(group = year), size = 2, color = \"#ECEDE0\") +   # add points with color mapped to type   geom_point(aes(color = type), size = 2, show.legend = FALSE) +   # removing extra margins on y scale   ylim(0,100) +   theme(     # remove background color     panel.background = element_blank(),     # change grid color and linetype     panel.grid = element_line(linetype = \"dotted\", color = \"grey\"),     # remove minor grid lines in x and y-axis     panel.grid.minor = element_blank(),     # change size of major x grid lines to 0 to remove but preserve axis ticks     panel.grid.major.x = element_line(size = 0),     # remove tick marks on y-axis     axis.ticks.y = element_blank(),     # change color of tick marks on x-axis     axis.line.x = element_line(color = \"grey\")) +     # setting colors   scale_color_manual(values=c(\"#8C6E23\", \"#C79A26\")) +   # change x-axis name, breaks, and labels   scale_x_continuous(name = \"\",                       breaks = election_years,                       labels = election_years %>% replace(election_years%%10 != 0 & election_years != 1828, \"\")) +   # change y-axis name, limits, margins, breaks, and labels   scale_y_continuous(name = \"\",                      limits = c(0,100),                       expand = c(0,0),                      breaks = c(25, 50, 75, 100),                      labels = c(\"25\", \"50\", \"75\", \"100%\"),) +   # add title and subtitle   labs(     title = \"The Electoral College can magnify a win into a landslide\",     subtitle = \"President-elect's share of popular and electoral votes\"   ) +   # add text to graph in place of a legend   annotate(geom=\"text\", x=1900, y=90, label='bold(\"ELECTORAL VOTES\")',               color=\"#8C6E23\", size = 3, parse = TRUE) +   annotate(geom=\"text\", x=1880, y=35, label='bold(\"POPULAR VOTE\")',               color=\"#C79A26\", size = 3, parse = TRUE) +   # adding labels for 2020 points   geom_label_repel(data = election_data %>%                pivot_longer(cols = c(new_perc_elect, perc_pop), names_to = \"type\", values_to = \"perc\") %>%               filter(is_winner) %>%                subset(year == 2020) %>%                mutate(perc = round(perc, 1)),               aes(label = perc, color = type),              nudge_y = c(10, -10),              label.size = 0,              show.legend = FALSE) #> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> Warning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0. #> ℹ Please use the `linewidth` argument instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> Scale for y is already present. #> Adding another scale for y, which will replace the existing scale. p <- election_data2 %>%   # create plot   ggplot(aes(x = year, y = perc)) +   # adding vertical lines   geom_line(aes(group = year), size = 2, color = \"#ECEDE0\") +   # add points with color mapped to type   geom_point(aes(color = type), size = 2, show.legend = FALSE) +   # removing extra margins on y scale   ylim(0,100) +   theme(     # remove background color     panel.background = element_blank(),     # change grid color and linetype     panel.grid = element_line(linetype = \"dotted\", color = \"grey\"),     # remove minor grid lines in x and y-axis     panel.grid.minor = element_blank(),     # change size of major x grid lines to 0 to remove but preserve axis ticks     panel.grid.major.x = element_line(size = 0),     # remove tick marks on y-axis     axis.ticks.y = element_blank(),     # change color of tick marks on x-axis     axis.line.x = element_line(color = \"grey\")) +     # setting colors   scale_color_manual(values=c(\"#8C6E23\", \"#C79A26\")) +   # change x-axis name, breaks, and labels   scale_x_continuous(name = \"\",                       breaks = election_years,                       labels = election_years %>% replace(election_years%%10 != 0 & election_years != 1828, \"\")) +   # change y-axis name, limits, margins, breaks, and labels   scale_y_continuous(name = \"\",                      limits = c(0,100),                       expand = c(0,0),                      breaks = c(25, 50, 75, 100),                      labels = c(\"25\", \"50\", \"75\", \"100%\"),) +   # add title and subtitle   labs(     title = \"The Electoral College can magnify a win into a landslide\",     subtitle = \"President-elect's share of popular and electoral votes\"   ) +   # add text to graph in place of a legend   annotate(geom=\"text\", x=1900, y=90, label=\"ELECTORAL VOTES\",               color=\"#8C6E23\", size = 3, parse = TRUE) +   annotate(geom=\"text\", x=1880, y=35, label=\"POPULAR VOTE\",               color=\"#C79A26\", size = 3, parse = TRUE) +   # adding labels for 2020 points   geom_label_repel(data = election_data %>%                pivot_longer(cols = c(new_perc_elect, perc_pop), names_to = \"type\", values_to = \"perc\") %>%               filter(is_winner) %>%                subset(year == 2020) %>%                mutate(perc = round(perc, 1)),               aes(label = perc, color = type),              nudge_y = c(10, -10),              label.size = 0,              show.legend = FALSE) #> Scale for y is already present. #> Adding another scale for y, which will replace the existing scale.  ggplotly(p) #> Warning in geom2trace.default(dots[[1L]][[2L]], dots[[2L]][[1L]], dots[[3L]][[1L]]): geom_GeomLabelRepel() has yet to be implemented in plotly. #>   If you'd like to see this geom implemented, #>   Please open an issue with your example code at #>   https://github.com/ropensci/plotly/issues  #> Warning in geom2trace.default(dots[[1L]][[2L]], dots[[2L]][[1L]], dots[[3L]][[1L]]): geom_GeomLabelRepel() has yet to be implemented in plotly. #>   If you'd like to see this geom implemented, #>   Please open an issue with your example code at #>   https://github.com/ropensci/plotly/issues"},{"path":"/articles/df_apply.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"df_apply()","text":"df_apply() function takes data frame applies given function specified columns returns modified version original data frame function applied.","code":""},{"path":"/articles/df_apply.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"df_apply()","text":"","code":"df_apply(   .data = ...,    .fun = ...,    .filter = ...,   ... )"},{"path":[]},{"path":"/articles/df_apply.html","id":"data","dir":"Articles","previous_headings":"Arguments","what":".data","title":"df_apply()","text":"data frame want function applied ","code":""},{"path":"/articles/df_apply.html","id":"fun","dir":"Articles","previous_headings":"Arguments","what":".fun","title":"df_apply()","text":"function want applied given columns","code":""},{"path":"/articles/df_apply.html","id":"filter","dir":"Articles","previous_headings":"Arguments","what":".filter","title":"df_apply()","text":"function can applied column data frame. filters columns want function applied .","code":""},{"path":"/articles/df_apply.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"df_apply()","text":"","code":"df1 <- data.frame(   A = c(1, 2, 3),   B = c(4, 5, 6),   C = c(\"foo\", \"bar\", \"baz\") )  new_df1 <- df_apply(.data = df1, .fun = function(x) x * 2, .filter = is.numeric)  new_df1 #>   A  B   C #> 1 2  8 foo #> 2 4 10 bar #> 3 6 12 baz df2 <- data.frame(   A = c(1.875, 2.654, 3.676),   B = c(4.169, 5.456, 6.289),   C = c(7.846, 8.186, 9.945) )  new_df2 <- df_apply(.data = df2, .fun = round, .filter = is.numeric)  new_df2 #>   A B  C #> 1 2 4  8 #> 2 3 5  8 #> 3 4 6 10 glimpse(population) #> Rows: 19 #> Columns: 17 #> $ age_group                                        <chr> \"0\", \"01-04\", \"05-09\"… #> $ X1940.U.S..Std.Million                           <int> 15343, 64718, 81147, … #> $ X1950.U.S..Std.Million                           <int> 20882, 86376, 87591, … #> $ X1960.U.S..Std.Million                           <int> 22930, 90390, 104235,… #> $ X1970.U.S..Std.Million                           <int> 17151, 67265, 98204, … #> $ X1980.U.S..Std.Million                           <int> 15598, 56565, 73716, … #> $ X1990.U.S..Std.Million                           <int> 12936, 60863, 72772, … #> $ X1991.Canadian.Std.Million                       <int> 14334, 55131, 69454, … #> $ X1996.Canadian.Std.Million                       <int> 12342, 53893, 67985, … #> $ X2000.U.S..Std.Million                           <int> 13818, 55317, 72533, … #> $ X2000.U.S..Std.Population..Census.P25.1130.      <int> 3794901, 15191619, 19… #> $ X2011.Canadian.Standard.Population               <int> 376321, 1522743, 1810… #> $ European..EU.27.plus.EFTA.2011.2030..Std.Million <int> 10000, 40000, 55000, … #> $ European..Scandinavian.1960..Std.Million         <int> 16000, 64000, 70000, … #> $ World..Segi.1960..Std.Million                    <int> 24000, 96000, 100000,… #> $ World..WHO.2000.2025..Std.Million                <int> 17917, 70652, 86870, … #> $ Standard.population.OECD                         <int> 1624, 6322, 8089, 830…  # Lets convert the population from millions into thousands to_thousands <- function(x) {   x * 1000 }  new_pop <- df_apply(.data = population, .fun = to_thousands, .filter = is.integer)  glimpse(new_pop) #> Rows: 19 #> Columns: 17 #> $ age_group                                        <chr> \"0\", \"01-04\", \"05-09\"… #> $ X1940.U.S..Std.Million                           <dbl> 15343000, 64718000, 8… #> $ X1950.U.S..Std.Million                           <dbl> 20882000, 86376000, 8… #> $ X1960.U.S..Std.Million                           <dbl> 22930000, 90390000, 1… #> $ X1970.U.S..Std.Million                           <dbl> 17151000, 67265000, 9… #> $ X1980.U.S..Std.Million                           <dbl> 15598000, 56565000, 7… #> $ X1990.U.S..Std.Million                           <dbl> 12936000, 60863000, 7… #> $ X1991.Canadian.Std.Million                       <dbl> 14334000, 55131000, 6… #> $ X1996.Canadian.Std.Million                       <dbl> 12342000, 53893000, 6… #> $ X2000.U.S..Std.Million                           <dbl> 13818000, 55317000, 7… #> $ X2000.U.S..Std.Population..Census.P25.1130.      <dbl> 3794901000, 151916190… #> $ X2011.Canadian.Standard.Population               <dbl> 376321000, 1522743000… #> $ European..EU.27.plus.EFTA.2011.2030..Std.Million <dbl> 1.0e+07, 4.0e+07, 5.5… #> $ European..Scandinavian.1960..Std.Million         <dbl> 1.6e+07, 6.4e+07, 7.0… #> $ World..Segi.1960..Std.Million                    <dbl> 2.4e+07, 9.6e+07, 1.0… #> $ World..WHO.2000.2025..Std.Million                <dbl> 17917000, 70652000, 8… #> $ Standard.population.OECD                         <dbl> 1624000, 6322000, 808… df3 <- data.frame(    D = c(5, 5, 8, 3),    E = c(4, 7, 4, 2),    F = c(8, 10, 3, 4)) my_fun <- function(x, multiplier) x * multiplier my_filter <- is.numeric df_apply(.data = df3, .fun = my_fun, .filter = my_filter, multiplier = 2) #>    D  E  F #> 1 10  8 16 #> 2 10 14 20 #> 3 16  8  6 #> 4  6  4  8"},{"path":"/articles/student_scores_vignette.html","id":"load-package-and-data","dir":"Articles","previous_headings":"","what":"Load Package and Data","title":"Visualizing Student Scores with Plotly","text":"","code":"data(\"student\")"},{"path":"/articles/student_scores_vignette.html","id":"plotly-basics","dir":"Articles","previous_headings":"","what":"Plotly Basics","title":"Visualizing Student Scores with Plotly","text":"Plotly R package creates high-quality, interactive plots graphs. Create Bar Chart using Plotly get started, just call plotting function plot_ly(). basic plot can make Plotly bar chart:","code":"plot_bar <- plot_ly(data = student, x = ~name, y = ~mark, type = \"bar\") %>%   layout(title = \"Student Scores\",          xaxis = list(title = \"Student Names\"),          yaxis = list(title = \"Scores\"))  plot_bar"},{"path":"/articles/student_scores_vignette.html","id":"customizing-bar-chart-colors","dir":"Articles","previous_headings":"","what":"Customizing Bar Chart Colors","title":"Visualizing Student Scores with Plotly","text":"including marker(), can customization, like changing bar color.","code":"plot_bar_custom_colors <- plot_ly(data = student, x = ~name, y = ~mark, type = \"bar\",         marker = list(color = 'orange')) %>%   layout(title = \"Student Scores\",          xaxis = list(title = \"Student Names\"),          yaxis = list(title = \"Scores\"))  plot_bar_custom_colors"},{"path":"/articles/student_scores_vignette.html","id":"create-a-scatterplot-using-plotly","dir":"Articles","previous_headings":"","what":"Create a Scatterplot using Plotly","title":"Visualizing Student Scores with Plotly","text":"Scatterplots another popular plot type. can create scatterplot specifying type = ‘scatter’:","code":"plot_scatter <- plot_ly(data = student, x = ~name, y = ~mark, type = 'scatter', mode = 'markers') %>%   layout(title = \"Student Scores\",          xaxis = list(title = \"Student Names\"),          yaxis = list(title = \"Scores\"))  plot_scatter"},{"path":"/articles/student_scores_vignette.html","id":"grouped-bar-chart-by-gender","dir":"Articles","previous_headings":"","what":"Grouped Bar Chart by Gender","title":"Visualizing Student Scores with Plotly","text":"Grouped Bar Chart Gender","code":"plot_grouped_bar <- plot_ly(data = student, x = ~name, y = ~mark, type = \"bar\", color = ~gender) %>%   layout(title = \"Student Scores by Gender\",          xaxis = list(title = \"Student Names\"),          yaxis = list(title = \"Scores\"))  plot_grouped_bar"},{"path":"/articles/student_scores_vignette.html","id":"create-a-box-plot-using-plotly","dir":"Articles","previous_headings":"","what":"Create a Box Plot using Plotly","title":"Visualizing Student Scores with Plotly","text":"Box plots useful visualizing distribution data. create box plot, specify type = ‘box’:","code":"plot_box <- plot_ly(data = student, y = ~mark, type = 'box') %>%   layout(title = \"Distribution of Student Scores\",          yaxis = list(title = \"Scores\"))  plot_box"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Yuqian Wang. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wang Y (2023). RPackProj: df_apply(). R package version 0.0.0.9000, https://ashill1470.github.io/RPackProj/.","code":"@Manual{,   title = {RPackProj: df_apply()},   author = {Yuqian Wang},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://ashill1470.github.io/RPackProj/}, }"},{"path":"/index.html","id":"rpackproj","dir":"","previous_headings":"","what":"df_apply()","title":"df_apply()","text":"goal RPackProj use df_apply function deal changing values certain columns data frame. Authors: Andrew Hill, Richmond Yevudza, Yuqian Wang","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"df_apply()","text":"can install development version RPackProj GitHub : https://github.com/ashill1470/RPackProj Website: https://ashill1470.github.io/RPackProj/","code":"# install.packages(\"devtools\") devtools::install_github(\"ashill1470/RPackProj\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"df_apply()","text":"basic example shows solve common problem:","code":"library(RPackProj)  df <- data.frame(   A = c(1, 2, 3),   B = c(4, 5, 6),   C = c(\"foo\", \"bar\", \"baz\") )  new_df <- df_apply(df, function(x) x * 2, is.numeric)  new_df #>   A  B   C #> 1 2  8 foo #> 2 4 10 bar #> 3 6 12 baz"},{"path":"/reference/df_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function to specific columns of a data frame — df_apply","title":"Apply a function to specific columns of a data frame — df_apply","text":"Apply function specific columns data frame","code":""},{"path":"/reference/df_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function to specific columns of a data frame — df_apply","text":"","code":"df_apply(.data, .fun, .filter, ...)"},{"path":"/reference/df_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function to specific columns of a data frame — df_apply","text":".data data frame. .fun function takes vector returns vector. .filter function takes vector returns logical vector. ... Additional arguments pass .fun .filter.","code":""},{"path":"/reference/df_apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function to specific columns of a data frame — df_apply","text":"data frame modified version .data","code":""},{"path":"/reference/df_apply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function to specific columns of a data frame — df_apply","text":"","code":"df <- data.frame(   A = c(1, 2, 3),   B = c(4, 5, 6),   C = c(\"foo\", \"bar\", \"baz\")) my_fun <- function(x) x * 2 my_filter <- function(x) is.numeric(x) df_apply(df, my_fun, my_filter) #>   A  B   C #> 1 2  8 foo #> 2 4 10 bar #> 3 6 12 baz"}]
